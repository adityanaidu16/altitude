// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlanType {
  FREE
  PLUS
  PRO
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
}

enum ProspectStatus {
  PENDING_VALIDATION
  VALIDATION_FAILED
  CONNECTION_PENDING
  CONNECTION_SENT
  CONNECTION_ACCEPTED
  MESSAGE_QUEUED
  MESSAGE_SENT
  COMPLETED
  FAILED
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String         @unique
  linkedinUsername     String?        @unique
  linkedinProfile      Json? // Store the processed LinkedIn profile data
  plan                 PlanType
  planStartDate        DateTime       @default(now())
  planEndDate          DateTime?
  needs_subscription   Boolean        @default(true)
  stripeCustomerId     String?        @unique
  stripeSubscriptionId String?        @unique
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  campaigns            Campaign[]
  careerGoal           String?
  industry             String?
  targetRoles          String[]
  RateLimit            RateLimit[]
  pendingDowngrade Boolean @default(false)
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String // The rate limit key (e.g., "create_campaign:userId")
  count     Int      @default(0)
  timestamp DateTime @default(now())
  userId    String // Link to user for per-user rate limiting
  user      User     @relation(fields: [userId], references: [id])

  @@unique([key, userId])
  @@index([userId])
  @@index([timestamp])
}

model Campaign {
  id              String        @id @default(cuid())
  name            String
  targetCompany   String
  status          CampaignStatus @default(ACTIVE)
  messageTemplate String?
  metadata        Json?
  autoApprove     Boolean       @default(false)
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  prospects       Prospect[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
}

model Prospect {
  id             String         @id @default(cuid())
  name           String
  position       String
  company        String
  linkedinUrl    String
  publicId       String // LinkedIn public ID
  status         ProspectStatus @default(PENDING_VALIDATION)
  campaignId     String
  campaign       Campaign       @relation(fields: [campaignId], references: [id])
  connectionId   String? // LinkedIn connection ID after connected
  message        Json? // Stored message and commonalities
  notes          String?
  validationData Json? // Store validation results
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  nextActionAt   DateTime? // Scheduled time for next action

  @@index([campaignId])
  @@index([status])
}
